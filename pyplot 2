# Load essential modules
import sys
import os
import string
import argparse
import numpy as np
import matplotlib.pyplot as plt

from matplotlib import markers

def IsInt(s):
    try: 
        int(s)
        return s
    except ValueError:
        return

def plot_cate_node_comp(file1,file2,file3,file4,file5,file6,file7,file8,save,x,y,log,ymax,ymin):
	if file1 != True:
		f1 = open(file1)
		lines = f1.readlines()
		x1 = [line.split()[x] for line in lines]
		y1 = [line.split()[y] for line in lines]

		f1.close()

		x1 = np.array(x1)
		x1 = x1.astype(np.float64)
		if log != True: 
			y1 = np.array(y1)
			y1 = y1.astype(np.float64)
		else:
			y1 = np.array(y1)
			y1 = np.log10(y1.astype(np.float64))
		
	
	if file2 != True:
			f2 = open(file2)
			lines = f2.readlines()
			x2 = [line.split()[x] for line in lines]
			y2 = [line.split()[y] for line in lines]
			

			f2.close()


			x2 = np.array(x2)
			x2 = x2.astype(np.float64)
			if log != True :
				y2 = np.array(y2)
				y2 = y2.astype(np.float64)
			else:
				y2 = np.array(y2)
				y2 = np.log10(y2.astype(np.float64))


	if file3 != True:
		f3 = open(file3)
		lines = f3.readlines()
		x3 = [line.split()[x] for line in lines]
		y3 = [line.split()[y] for line in lines]
		

		f3.close()


		x3 = np.array(x3)
		x3 = x3.astype(np.float64)
		if log != True : 
			y3 = np.array(y3)
			y3 = y3.astype(np.float64)
		else:
			y3 = np.array(y3)
			y3 = np.log10(y3.astype(np.float64))
		

	if file4 != True:
			f4 = open(file4)
			lines = f4.readlines()
			x4 = [line.split()[x] for line in lines]
			y4 = [line.split()[y] for line in lines]
			

			f4.close()


			x4 = np.array(x4)
			x4 = x4.astype(np.float64)
			if log != True :
				y4 = np.array(y4)
				y4 = y4.astype(np.float64)
			else:
				y4 = np.array(y4)
				y4 = np.log10(y4.astype(np.float64))
	
	if file5 != True:
			f5 = open(file5)
			lines = f5.readlines()
			x5 = [line.split()[x] for line in lines]
			y5 = [line.split()[y] for line in lines]
			

			f5.close()


			x5 = np.array(x5)
			x5 = x5.astype(np.float64)
			if log != True :
				y5 = np.array(y5)
				y5 = y5.astype(np.float64)
			else:
				y5 = np.array(y5)
				y5 = np.log10(y5.astype(np.float64))
	
	if file6 != True:
			f6 = open(file6)
			lines = f6.readlines()
			x6 = [line.split()[x] for line in lines]
			y6 = [line.split()[y] for line in lines]
			

			f6.close()


			x6 = np.array(x6)
			x6 = x6.astype(np.float64)
			if log != True :
				y6 = np.array(y6)
				y6 = y6.astype(np.float64)
			else:
				y6 = np.array(y6)
				y6 = np.log10(y6.astype(np.float64))
	
	if file7 != True:
			f7 = open(file7)
			lines = f7.readlines()
			x7 = [line.split()[x] for line in lines]
			y7 = [line.split()[y] for line in lines]
			

			f7.close()


			x7 = np.array(x7)
			x7 = x7.astype(np.float64)
			if log != True :
				y7 = np.array(y7)
				y7 = y7.astype(np.float64)
			else:
				y7 = np.array(y7)
				y7 = np.log10(y7.astype(np.float64))
	
	if file8 != True:
			f8 = open(file8)
			lines = f8.readlines()
			x8 = [line.split()[x] for line in lines]
			y8 = [line.split()[y] for line in lines]
			

			f8.close()


			x8 = np.array(x8)
			x8 = x8.astype(np.float64)
			if log != True :
				y8 = np.array(y8)
				y8 = y8.astype(np.float64)
			else:
				y8 = np.array(y8)
				y8 = np.log10(y8.astype(np.float64))
	
	#Get groundstate energy
	f = open('nw_gs.txt')
	lines = f.readlines()
	gs = [line.split() for line in lines]
	
	RMS = 0.02

	# Create a new plot object
	fig, ax1 = plt.subplots()


	# Plot data

	if file1 != True:
		ax1.scatter(x1, y1 ,color='grey', marker='.', label='3x10 Calculator')
	if file2 != True:
		ax1.scatter(x2, y2 ,color='dodgerblue', marker='.', label='3x16 Calculator')
	if file3 != True:
		ax1.scatter(x3, y3 ,color='yellow',marker='.', label='3x20 Calculator')
	if file4 != True:
		ax1.scatter(x4, y4 ,color='purple', marker='.', label='3x24 Calculator')
	if file5 != True:
		ax1.scatter(x5, y5 ,color='blue', marker='.', label='4x10 Calculator')
	if file6 != True:
		ax1.scatter(x6, y6 ,color='green', marker='.', label='4x16 Calculator')
	if file7 != True:
		ax1.scatter(x7, y7 ,color='orange',marker='.', label='4x20 Calculator')
	if file8 != True:
		ax1.scatter(x8, y8 ,color='red', marker='.', label='4x24 Calculator')
	#~ if file9 != True:
		#~ ax1.scatter(x9, y9 ,color='red', marker='.', label='2000 frames in training set')
	
	
	
	
	#ax1.scatter(gs, 0 ,color='k', marker='8', label='Ground state Energy')
	#plt.plot([0,3000 ], [0.02, 0.02], 'k-', lw=2, label='Threshold RMS Force')

	ax1.set_xlabel('Number of Steps', fontsize=12)
	if log != False:
		ax1.set_ylabel('log (RMSE Force)', fontsize=12)
	else:
		ax1.set_ylabel('RMSE Force (eV/$\AA$)', fontsize=12)
	ax1.set_title('Performace of 3xn AMP Calculators', fontsize=12)
	ax1.set_ylim(ymin,ymax)

	ax1.grid(True)
	
	ax1.legend()


	fig.tight_layout()
	plt.show()
	if save == True:
		fig.savefig('water_force_vs_ang')



# Main program
def main(): 
    
    # Parse command line values
    main_help = ('Column format: Frame num, Traj energy, Calc energy, energy diff, RMS Force, Max Force')
    epi_help = ('')
    parser = argparse.ArgumentParser(description=main_help,epilog=epi_help)
    parser.add_argument('--file1','-f1',default=True,type=str,help='')
    parser.add_argument('--file2','-f2',default=True,type=str,help='')
    parser.add_argument('--file3','-f3',default=True,type=str,help='')  
    parser.add_argument('--file4','-f4',default=True,type=str,help='')  
    parser.add_argument('--file5','-f5',default=True,type=str,help='')  
    parser.add_argument('--file6','-f6',default=True,type=str,help='')  
    parser.add_argument('--file7','-f7',default=True,type=str,help='')  
    parser.add_argument('--file8','-f8',default=True,type=str,help='')  
    parser.add_argument('--x_col','-x',default=True,type=int,help='')  
    parser.add_argument('--y_col','-y',default=True,type=int,help='')
    parser.add_argument('--y_max','-yx',default=None,type=float,help='')  
    parser.add_argument('--y_min','-yn',default=None,type=float,help='')  
    parser.add_argument('--log','-l',default=False,type=bool,help='')  
    parser.add_argument('--save','-s',default=False,type=bool,help='')
      
    args = parser.parse_args()
    print('#',args)
    
    plot_cate_node_comp(args.file1,args.file2,args.file3,args.file4,args.file5,args.file6,args.file7,args.file8,args.save,args.x_col,args.y_col,args.log,args.y_max,args.y_min) 


if __name__ == '__main__':
    main()
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
